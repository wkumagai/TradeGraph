"""Node for writing the final investment research report."""

import os
from typing import Dict, Any
from datetime import datetime


def write_report_node(state: Dict[str, Any]) -> Dict[str, Any]:
    """Write the complete investment research report.
    
    This node assembles all sections into a professional report.
    """
    report_sections = state.get("report_sections", {})
    visualizations = state.get("visualizations", [])
    investment_method = state.get("investment_method", {})
    
    # Start building the report
    report = f"""# Investment Strategy Research Report: {investment_method.get('method_name', 'Unnamed Strategy')}

**Generated by AIRAS-Trade Research System**  
**Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}**

---

"""
    
    # Add table of contents
    report += """## Table of Contents

1. [Executive Summary](#executive-summary)
2. [Market Research](#market-research)
3. [Investment Strategy](#investment-strategy)
4. [Backtest Results](#backtest-results)
5. [Analysis and Insights](#analysis-and-insights)
6. [Implementation Roadmap](#implementation-roadmap)
7. [Visualizations](#visualizations)
8. [Risk Disclosure](#risk-disclosure)
9. [Appendices](#appendices)

---

"""
    
    # Add main sections
    section_order = [
        "executive_summary",
        "market_research",
        "investment_strategy",
        "backtest_results",
        "analysis",
        "implementation",
    ]
    
    for section_key in section_order:
        if section_key in report_sections:
            report += report_sections[section_key] + "\n\n---\n\n"
    
    # Add visualizations section
    report += "## Visualizations\n\n"
    report += "*Note: Visualizations would be generated during actual execution*\n\n"
    
    for i, viz in enumerate(visualizations, 1):
        report += f"### Figure {i}: {viz['title']}\n"
        report += f"{viz['description']}\n\n"
        report += f"![{viz['title']}](./{viz['title'].lower().replace(' ', '_')}.png)\n\n"
    
    report += "---\n\n"
    
    # Add risk disclosure
    if "risk_disclosure" in report_sections:
        report += report_sections["risk_disclosure"] + "\n\n---\n\n"
    
    # Add appendices
    report += """## Appendices

### Appendix A: Methodology Details

This research was conducted using the AIRAS-Trade system, which includes:
- Automated market news and research paper analysis
- AI-driven investment strategy generation
- Systematic backtesting framework
- Comprehensive performance analysis

### Appendix B: Data Sources

- **Market Data**: Yahoo Finance, Alpha Vantage
- **News Sources**: Reuters, Bloomberg, WSJ, CNBC
- **Research Papers**: ArXiv, SSRN, NBER
- **Analysis Period**: As specified in experiment design

### Appendix C: Glossary

- **Sharpe Ratio**: Risk-adjusted return metric (return per unit of risk)
- **Maximum Drawdown**: Largest peak-to-trough decline
- **Win Rate**: Percentage of profitable trades
- **Alpha**: Excess return over market benchmark
- **Beta**: Sensitivity to market movements

### Appendix D: Contact Information

For questions about this research:
- System: AIRAS-Trade Automated Research
- Version: 1.0
- Generated: {datetime.now().strftime('%Y-%m-%d')}

---

**Disclaimer**: This report is generated by an automated AI system for research purposes only. It does not constitute investment advice. Always consult with qualified financial advisors before making investment decisions.
"""
    
    # Save the report
    save_dir = state.get("save_dir", "./stock_research_output")
    report_file = os.path.join(save_dir, "report", "investment_research_report.md")
    
    with open(report_file, "w") as f:
        f.write(report)
    
    # Also create a summary version
    summary_report = f"""# Investment Strategy Summary: {investment_method.get('method_name', 'Unnamed Strategy')}

**Date: {datetime.now().strftime('%Y-%m-%d')}**

## Quick Summary

**Strategy**: {investment_method.get('method_name', 'Unnamed Strategy')}  
**Recommendation**: {state.get('strategy_evaluation', {}).get('recommendation', {}).get('action', 'Under Review')}  
**Confidence**: {state.get('strategy_evaluation', {}).get('recommendation', {}).get('confidence', 'Unknown')}

## Key Metrics

- **Total Return**: {state.get('performance_metrics', {}).get('total_return', 'N/A')}
- **Sharpe Ratio**: {state.get('performance_metrics', {}).get('sharpe_ratio', 'N/A')}
- **Max Drawdown**: {state.get('performance_metrics', {}).get('max_drawdown', 'N/A')}
- **Win Rate**: {state.get('performance_metrics', {}).get('win_rate', 'N/A')}

## Top 3 Insights

"""
    
    for i, insight in enumerate(state.get('key_insights', [])[:3], 1):
        summary_report += f"{i}. {insight}\n"
    
    summary_report += f"""
## Next Steps

"""
    
    for i, step in enumerate(state.get('strategy_evaluation', {}).get('recommendation', {}).get('next_steps', [])[:3], 1):
        summary_report += f"{i}. {step}\n"
    
    summary_report += """
---
*Full report available in `investment_research_report.md`*
"""
    
    with open(os.path.join(save_dir, "report", "summary_report.md"), "w") as f:
        f.write(summary_report)
    
    # Update state
    state["final_report"] = report
    
    print(f"Report written: {len(report)} characters")
    print(f"Saved to: {report_file}")
    
    return state