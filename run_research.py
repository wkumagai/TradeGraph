#!/usr/bin/env python3
"""Run AIRAS research pipeline."""

import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

from airas.features import (
    RetrieveCodeSubgraph,
    CreateMethodSubgraph,
    CreateExperimentalDesignSubgraph,
    CreateCodeWithDevinSubgraph,
    GitHubActionsExecutorSubgraph,
    FixCodeWithDevinSubgraph
)

def run_full_research_pipeline():
    """Run a complete research pipeline."""
    
    # Configuration
    # Available OpenAI models: "gpt-4o-mini-2024-07-18", "gpt-4o-2024-11-20", "gpt-4.1-2025-04-14"
    # Available Google models: "gemini-1.5-flash", "gemini-1.5-pro", "gemini-2.0-flash-exp"
    llm_name = "gpt-4o-mini-2024-07-18"
    
    # Initial state - customize your research topic here
    state = {
        # Research topic (required for CreateMethodSubgraph)
        "research_topic": "transformer model inspired by free energy principle",
        
        # Research papers list (required for CreateMethodSubgraph)
        "research_study_list": [],  # Empty list for now, would normally contain related papers
        
        # For other subgraphs that might need base_queries
        "base_queries": "transformer model inspired by free energy principle",
        
        # Configuration
        "llm_name": llm_name,
        "save_dir": "./research_output",
        "gpu_enabled": True,
        "experiment_iteration": 1,
        
        # GitHub configuration (required for Devin code generation)
        "github_owner": "your-username",
        "repository_name": "airas-experiments",
        "github_repository": "your-username/airas-experiments",  # Required for Devin
        "branch_name": "main"
    }
    
    print("🚀 Starting AIRAS Research Pipeline")
    print("=" * 70)
    print(f"Research Topic: {state['research_topic']}")
    print(f"LLM Model: {state['llm_name']}")
    print("=" * 70)
    
    # Step 1: Create research method
    print("\n📝 Step 1: Creating research method...")
    creator = CreateMethodSubgraph(llm_name=llm_name)
    state = creator.run(state)
    print(f"✓ Method created: {state.get('new_method', 'No method')[:200]}...")
    
    # Step 2: Create experimental design
    print("\n🔬 Step 2: Creating experimental design...")
    designer = CreateExperimentalDesignSubgraph(llm_name=llm_name)
    state = designer.run(state)
    print(f"✓ Design created: {state.get('experiment_strategy', 'No strategy')[:200]}...")
    
    # Step 3: Generate code with Devin (skip if no valid GitHub repository)
    if state.get("github_repository") == "your-username/airas-experiments":
        print("\n💻 Step 3: Skipping Devin code generation (GitHub repository not configured)")
        print("   To enable: Set your actual GitHub repository in the state")
        # Save the experiment code generated by CreateExperimentalDesignSubgraph
        if "experiment_code" in state:
            import os
            os.makedirs(state["save_dir"], exist_ok=True)
            with open(f"{state['save_dir']}/experiment_code.py", "w") as f:
                f.write(state["experiment_code"])
            print(f"   ✓ Experiment code saved to: {state['save_dir']}/experiment_code.py")
    else:
        print("\n💻 Step 3: Generating implementation code...")
        coder = CreateCodeWithDevinSubgraph()
        state = coder.run(state)
        print("✓ Code generated successfully")
    
    # Step 4: Execute experiments (optional - requires GitHub setup)
    if (state.get("github_owner") != "your-username" and 
        state.get("repository_name") and 
        state.get("experiment_devin_url")):
        print("\n🏃 Step 4: Executing experiments with GitHub Actions...")
        executor = GitHubActionsExecutorSubgraph()
        state = executor.run(state)
        print("✓ Experiments executed")
    else:
        print("\n🏃 Step 4: Skipping GitHub Actions execution (requires valid GitHub config and Devin URL)")
    
    # Step 5: Fix any issues with code
    if state.get("error_text_data"):
        print("\n🔧 Step 5: Fixing code issues...")
        fixer = FixCodeWithDevinSubgraph(llm_name=llm_name)
        state = fixer.run(state)
        print("✓ Code fixed")
    
    # Save all outputs
    save_dir = state.get('save_dir', './research_output')
    import os
    os.makedirs(save_dir, exist_ok=True)
    
    # Save method
    if "new_method" in state:
        with open(f"{save_dir}/method.txt", "w") as f:
            f.write(state["new_method"])
    
    # Save experimental design
    if "experiment_strategy" in state:
        with open(f"{save_dir}/experiment_strategy.txt", "w") as f:
            f.write(state["experiment_strategy"])
    
    print("\n" + "=" * 70)
    print("✅ Research pipeline completed!")
    print(f"Results saved to: {save_dir}")
    print(f"  - Method: {save_dir}/method.txt")
    print(f"  - Strategy: {save_dir}/experiment_strategy.txt")
    if "experiment_code" in state:
        print(f"  - Code: {save_dir}/experiment_code.py")
    
    return state

if __name__ == "__main__":
    # Activate virtual environment first:
    # source venv/bin/activate
    
    # Run the research
    final_state = run_full_research_pipeline()
    
    # Print summary
    print("\n📊 Research Summary:")
    print(f"- Method: {final_state.get('new_method', 'N/A')[:100]}...")
    print(f"- Strategy: {final_state.get('experiment_strategy', 'N/A')[:100]}...")
    print(f"- Code Generated: {'Yes' if 'experiment_code' in final_state else 'No'}")
    print(f"- Iteration: {final_state.get('experiment_iteration', 1)}")